0	The first question I do use the code execution view, I did not understand it at once. When I came to understand what it mean, there is not enough time.	3	4		I do use this function.	4
3137	I didn't really have time to make sense of it, and with the limited time given, it was hard searching and trying to learn it on the fly.	1	0	Because although you might think you have solved a problem, but it might not have been solved permanently and it's always good to look back on the work		3
3152	After writing the code, I want to verify the output. For this I had to use the code execution view.	3	3		The problem did not require me to go back.	3
3162	I found the problems to be too easy for the interface to be really useful.	3	2		Did not use the interface a lot.	3
3174	I mostly kept track of variables, to see when modifications were not in line with my expectations.	3	3	I wanted to see the source of a particular variable change.		4
3178	I love it.  It's the greatest view ever.	2	3	I wanted to see were the error or fault in execution occurred.  I wanted to see if I could understand why it stopped.		3
3222	Allowed me to track scope of variables and which code was executed at each step. Also was helpful in tracking the values of certain variables.	4	4	This feature was important in revisiting the problematic areas of my code. 		4
3249	Evaluate how the code is executed, the value of the variables at a given time and whether it enters correctly in the cycles.	3	3	Useful because it allows a detailed, step-by-step view of what's going on inside the code. I like very much.		4
3256	Very straightfull and visual way of debugging. Very useful for the beginners.	4	4	To help me understanding how the program works. Try to find the bug.		4
3284	On the first test I did not completely understand what was going on, so I had to use the tutor to visualize it, although I was unable to debug it.  On the second test I did not have to use it because I though I knew what was going on by looking at the code. I also had an immediate idea on how to solve it as soon as I looked at the problem.	4	3		On the second problem, I did not use the interpreter. On the first problem I did not know how to solve it.	4
3290	I used it to see what was the computer doing and I as missing	2	4	Because  I wanted to check was had happened before...................................................................................................................		4
3295	good to see the execution by line by line. New to the debugging skill as a beginner.	2	2		 i haven't seen the back ward	3
3321	can't finish in giving time python_tutor is awesome for me	4	4		i just not in a situation need to use it,it still useful	3
3326	I used it to see the values of the variables and results of the function calls.  It was difficult to jump to a specific line in the code execution view and have to go through each step.  	2	2		I did not find it useful to step backward since I could start from the beginning and run through the code.	1
3338	It really helped me keep track of the execution of the program, the variables, and stuff that I would regularly write down on paper.  It was really helpful as a resource to see how the code flowed and how it was wrong	4	4	It was very important to see where I messed up in my code.  I also used it to look at mistakes in initialization, go back through for loops etc		4
3371	The steps were clear, i could understand how the first section worked, the only problem was that my coding skills were lower than estimated.	3	3		Did not feel the need, I've just clicked forward, saw that the code was wrong, and where, and just returned to editing the code.	2
3392	I only used the fields to see the current state of the variables, seeing the data structures could be useful if the data structures were more complicated. The view is almost exactly how I was taught to trace programs on paper.	4	4		The programs were not that complicated that I forgot how I came to the current step, or needed to look at the past state.	4
3398	I used the code execution view to track each of the variables' values in the code and how they change when the code is executed.	3	4	To ascertain how the value of a variable changed. In this case how the list mutated.		3
3418	To find the line with the error. To view what the memory addresses were doing with the values, to track the variable as it passes arguments.	3	4	The first time was to make sure I understood the activity of the variable as it passed. Anytime after that I hammered the back button because being precise with the tiny curser was a waste of time.		4
3419	only in the first task to see where things go wrong	3	4	I went back to the beginning of a function's execution because I'd missed an important point.		4
3423	gg;kgrk;lkg;lfgk;lfgk;dfkgd;fgkdf ;ke;rlg;rge;rgjrklgjrkle	2	2		erohrthoerthrthrothruthruithurt	3
3429	I don't have enough time to debug my code and I find it very difficult for a rookie to write the code.	1	3	I wanna make myself understood the code and find where I was wrong.		4
3431	First problem, to see what was going on. Second problem, didn't get enough time, so dry-ran it in my head.	4	4	It's good for trying to figure out control flow, and setting up/changing values of variables.		4
3444	I only looked at the results, because I only needed to look at the results. Had there been a problem I couldn't understand, I would definitely have used the code execution view.	3	3		I didn't use the code execution view.	3
3452	Because it made it easier to look at what was wrong	3	2		Because I didn't need to at the time	3
3460	I used it for an over view of the entire program functioning. I also used it to look for specific errors in calculation	4	4	I actually didn't mean to use this function. I meant to press the edit code link instead.		2
3474	6.  5. 	0	0	6. 63.		3
3476	I can see the variables in every step, which is very useful. Can know if there is an infinite loop 	3	4		Identified the problem myself and went back to change the code	3
3520	dddddddddddddd ssssssssssssssss	2	2	sssssssssssssss ssssssssssssssssss		2
3555	didn't have enough time. fam.	3	3	to see if loops would work correctly. fam.		4
3559	To see scopes better. And to see what happens as each step takes place.	3	4	Sometimes to remind yourself what previously happened. Other times to re-read a part you couldn't quite understand. But mostly to see which part of the code you can modify to debug a code.		4
3591	I didn't have time to execute the code. Directly debugged the code	4	3	Because I missed something, wanted to backtrack to see what happened.		4
3592	I used it because it has been really difficult for me to understand count controlled loops. I have been struggling with this one chapter for an embarrassing amount of time. I didn't even know what arrays were so the code execution view was not helpful on the first question. It was very helpful to form some type of picture in my mind though.	4	4		On the first question, it gives an error message on line 16 so it was not able to run the code in the first place. On the second problem, i felt like i had a clear understanding of the question. I do however use the backward button all the time when in my efforts to have a clear understanding of count controlled loops. 	4
3593	to check the value of the variable in each step. to see the flow of the program. 	3	3	by mistake                                                                                                                      		3
3595	I had to look at the list in order to find that the local list in the reverse function would get reversed twice before I fixed that bug. For the Second task, using the code execution seemed unnessecary.	4	4		All I had to learn from the code Exekution became clear to me during a forward stepping. The Problem behind the bug was obvious without ging back and forward.	2
3606	keep track of what is going on with variables and execution	3	3	See what went wrong in previous steps, re-trace my steps		3
3611	I did not need it, but it was interesting to see the graphical representation	4	3	I don't know, did I? I think I missed an execution error (variable not defined).		2
3617	shows the references and if the scope is correct. also good to see how the variables change with recursion	3	3		I didn't need to look back.	3
3645	I didn't really. I didn't have enough time to get to the part of the process where I made a mistake and I tried to figure it out. I think there should be more challenging questions but give more time to do them so we can actually use the debugger.	3	3	I don't remember doing that..		4
3663	traced my code execution and variable changes, went back and forth a few times	4	4	See how I got to current state of affairs and what did things look like previously		4
3666	Didn't need to use it much. Tasks were quite easy. Hard to scroll up and down and left to right which made it harder to use than a normal editor	4	1	Want to see what is happening with the execution. Didn't use it many times.		2
3668	 I used the window to  debug my code ..Line by line.	2	3		i did'nt mind. actually i  didn'nt notice them. 	3
3670	Used to see what is wrong, initially found index is reference correctly. Which helped me to identify the runtime problem immediately.  Once runtime errors are displayed, found that the output is incorrect which signifies that logic is incorrect.   	2	3	Helps to see the values each variables assigned to just before the execution failed.		4
3675	dwhdjw dwjdhjdxvx.xdfkNSSNJFJSEGFEOEWVVHVKFGUHFIFGDJKHDGFDHDBjhflfkflfgejkjdqwe20hjehf	0	2		kdshfkshfwueyfhovdvhDSLvskvj	0
3678	I didn't use it. Was more intuitive to visualise it moving in my head. 	1	1		I did not use the tutor haha.	3
3700	To see where the code failed for test cases and therefore correct the bugs in a more efficient way.	4	4	To see where exactly a bug had been produced or when yÂ¡the code had started to go wrong.		3
3702	Execution view helps me understand the flow of the code and where its failing and why its failing at that point.	4	4		Though I have not used "backward step" for this survey, I have used it while debugging my other codes. It helps me understand whats the previous situation which is leading to the point where it is failing.	3
3728	In the 1st task i completed the work before time and able to use the code execution view but in the 2nd task i did not complete the work in the time just as the time was up.	2	4		I did not notice properly that there was a button for that action in hurry	4
3733	I can not describe my expirience, I am not so good speaking( and writing)	3	3	Program executes at the end, as usual. I want to see interim results		4
3738	You can see where your code goes wrong and it's easily fixable. On the other hand using the visualizer takes time because you don't know where your code does something wrong and if it's a longer code with more execution lines you'll be scrolling trough 600 executions.	4	3	I use back to identify and be sure that this part of the code messed up. In a longer it could be that a small misstep leads to a wrong result, that's why it's important to be able to go back in your code and identify the problem.		4
3749	It was really good guys. You have developed a exciting product and it helps me a lot	4	4		Ya kind of because i worked on another tab of your tool thats y	4
3751	It was useful to use that. But it's very slow. Add time pause when executing the code.	2	2	to go to the head or to the previous line of the code.		3
3756	The code execution view told me exactly where the code failed and what values the program was using when it failed.	4	4	I had clicked too fast past the step I wanted to see -- I always forget to set break points, so I always end up quickly clicking the Forward button a bunch of times to get to the step I'm interested in.		4
3772	I like to put in print commands to see exactly what it's doing at key points and print the output. I then get a chance to see what the code is doing.	4	4	To see where the code was going wrong, or what it was doing at a particular point. 		4
3773	It first helped me understand what the code was doing and helped to to get on to it quick .. Still I couldn't get it done under 6 mins	4	4		I predicted the outcome before going to next line .. whenever I get the expected answer I would not be interested in going back 	4
3790	Used code execution view to track the flow of data between different variables	3	4	Checked the previous values due to incorrect results and corrected the code		4
3806	I clicked through to find any mistakes. After finding one mistake, I corrected it and checked again.	4	4		I did not need to as I know what should happen.	4
3811	im really stupidim really stupidim really stupidim really stupidim really stupidim really stupidim really stupidim really stupidim really stupidim really stupidim really stupidim really stupidim really stupid	3	4			
3813	used forward button to visualize the codes,,execute but to execute the code	2	4		not needded whiole execution 	4
3815	Helped to visualize it Followed references	4	4			
3822	jsfPJF[ADGJ]DGJA]GAJDG]F.Skf;slfkfkf]a	3	3		dlaf'dglja['gljak]gaj]gflkjal[glaj	1
3858	Not very useful as their as no time. I cant code fast enough 	1	2	Very important As i stepped back to get hat as going on		4
3859	lpppzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.zeeeeeeeeeeeeeeeeeeee.	2	2			
3864	tracking variables and data types was very helpful 	1	4	so i can see how variable values changed and which step of my code failed		4
3870	klafjdsoiajefjlsdf dfjklasfjdioejf asd falsjfojeif alskf asfjoawefjlasdf asfj aofejakf jldsv askjfls dfvnv,msdfasf aowejf faf	2	2		eijfoaef dsfjkasf akwj eof aofjewfj ofj osjflksjf ajfoeifjaskfjl	2
3903	I didn't have much time for that, but I use to use that a lot.	3	4		I didn't have a time for that	3
3933	clear. clear.	2	2	clear. clear.		3
3937	Firstly, I run the code to last directly to see whether the output value is the same as expected. If there are some mistakes, I run the code step by step to see how the values change.	3	4		In my execution, I do not need to step backward.	2
3980	aaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaa	4	4		aaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaaaaa aaa	4
4019	nice .onsent | Demographics | Instructions | Tasks | Follow-Up (1/3) | Result	0	4		We noticed that when using the debugger you never took backward steps.	4
4035	Watched to make sure number swapping routine in problem 1 was doing what I expected.	4	3		Didn't see unexpected results during execution. Didn't have time to use stepping at all in problem 2.	4
4039	I used it during the problem with reversing the list because it helped me see the sequence that caused the errors.	4	4		I didn't feel the need to do so, the problems were not difficult enough for that.	4
4049	It was helpful to me in many ways as first i didn't need to take pen and paper and iterate over each loop it used to do on its own and error searching was wasy.	4	4	I stepped backward to check whether i made some initialization error and to check the loop logic again.		4
4065	couldn't get how to debug codes. I thihk i need to learn it 	1	3	..................		2
4119	asdfgadsfgasdf. asdfasdf.	4	4			
4160	Time was short to check the flow through execution view	3	2		Was not comfortable in backward execution	3
4180	I primarly used it n the first to see the array changes Sisn't look at it the second time, never got to testing code 	4	3	To get to a previous point in the code to check a theory, also to seee changes I didn't catch		2
4186	Didn't need it, except to see the outputs. The intermediate answers not useful to me	4	4		I Didn't need to.	1
4188	fszjktzjhrtjfjrzerz rtzuhdsjzdjfg fgnxnncvmn cfhjm hjdfrj 	0	0		aehhdshsjsfrhjsrtj aherrtjarh 	0
4189	It was handy to use the code viewer to see the structure of the Books object to decide how to write the code.  Pictorial representation of data structures is much closer to how I visualize the data structures compared with traditional debuggers.	3	4	It was handy to unwind the execution once a problem was noticed to the state prior to the problem occurring in order to see it happening again.  The back button also helped familiarize myself with how precise the execution actually was and made getting comfortable with it faster.		4
4217	I didn't use it beacause I wasn' familiar with it. You should give a practice.	1	2		Not enough time.	2
4222	time consuming to run thru each step. But easier with smaller questions.	3	2		Too time consuming. 	3
4228	went step by step and checked that result was as expected and if there were any errors	2	2	after encountering an error i went back to see what might have caused it		4
4236	Flow of the program was better explained by this.Every step showed the execution.	1	1	To see what the previous step had done. The previous steps importance.		2
4253	maybe I'm not a programmer,so I can't understand very well...	0	3		blabla/..	4
4290	It is helpful to see the values of variables in realtime, especially for catching off-by-one bugs.	3	3		I realized the error and went back to the code to adjust instead of stepping back because the problems were trivial	2
4302	weqweqweqwesd asdas asd./ sdqwrqw qwrq,.wr.qwr.,qw	2	2	qwrqwrqwrqwr. fdg.		0
4315	Easy to step through.  Good way to see the code flow. 	4	4	To see the change again.  I wanted to see the change again.		2
4356	There where not enough time to debug and the problem was relatively easy to spot. So I just used it for execution. The second tasks had problem in the editor, so I had to run the execution view to be able to edit. This might be a problem when evaluation this?! 	4	2		I am expecting things to fail, so no need to step backward.	1
4362	dsffdgffdfggf chvhvfhcvbn bvdgchjcg gchdggchbcndgh ghddgdgztezhgcdcdd 	0	4		fghsgjhnfrsjstzjkzr hrtsjz rtjrhdfgx hdfjkzrt kdztzjk fjkhxjftgjzdtz	4
4364	adsgbgfdsjh gkjlklukliouilughluhiplhillllllllllllllllllllllllllllllhjgkghl hlk?lhblkb hkvllgjkl?b bjk?k?kbj ?	0	4		klgj?.h??jk?k.jb?-bj?-hlfjkzsdzq36z ryeuhey 5uw5e4 7u w i6 i5wu rt	4
4370	Firstly test code to find bugs, then trying to debug by changing code and using Python Tutor	4	3	To see how this code is processing and understand where is problem		4
4403	Identifying null returns values. Mostly though was not looking at the logical structure required by the tasks	3	2		Apart from not using the debugger much I was assuming the code was more incomplete than buggy. That is the code was lacking functionality rather than having incorrect functionality implemented. I may take the test a second time see if that assumption is flawed.	3
4407	To test the existing code acted in a sensible manner (it did in 2nd problem not necessarily in 1st problem). To check output of my code was not running into type errors or similar.	3	3	Rechecking variables and at what point they were changing. Main use is checking everything up to that point is working fine. It is the equivalent of setting breakpoints in a more traditional IDE - and a backwards step is convenient.		3
4416	Forgot on 2nd problem. Tested solution on first problem (came from reading up on standard data types.	3	3		Forgot on 2nd problem and everything passed on 1st problem.	3
4427	I used code execution to view which variable/array had what value at any given step. This helped me to see what I was doing wrong or what I needed to do next.	4	4	I stepped backward in execution in order to see what the value was at the step before the program failed.		4
4458	Didn't use the interface. It's too verbose, so it will get in the way of my mind.	2	0		Backward stepping is a great feature, but I didn't have enough time to make use of that.	3
4480	I used it to visualize the data structure (in the second example) and to inspect the values of variables during execution	4	3	When I noticed an error, I traced back to see what caused it. Also, I ran the entire program ('Using the last button') and stepped back to check its execution. That way the whole data structure and program output is already displayed, so you get more information quicker (compared to stepping through from the beginning).		3
4506	I like to find out how a program works by myself, but pythontutor helps me find out where are misktakes/things I don't think about when running the code in my head	3	3	I forgot the initial list in the first task, helped me find out quicklier what it was		4
4540	Detect variable values during each step of program run, expand recursive / visualize loops	2	3	To see the steps leading to an error / failure to facilitate debugging.		3
4546	It was nice to be able to watch the variables values change, and the arrows indicating references to objects.	4	3		I saw the problems in my execution before they happened. If I hadn't, then backing up to see why they happened would have been useful.	3
4548	..	1	1	..		1
4560	I didn't have to use the Python Tutor interface because the problems were easy enough. I have used it in the past though.	4	2		Because the problems were easy enough that I didn't have to actually debug anything.	4
4562	Describe in two or more sentences how you used the code execution view to debug your code (or why you did not use that view)?  	4	2		Describe in one or more sentence why you did not step backward in the execution? 	4
4565	I used it to see where all the problems went wrong 	1	4	This lets you see where you need to fix more..		4
4587	Could not understand in first view, need to understand first.	0	0			
4608	i was not able track the ouput , i was getting lost during the debug i was more concentrated debug rather find a bug in code	0	2	Because i was missed value previously , i was losing the value of presiovous step		2
4628	I used it to see the programs output and the values that variables got during the execution. Didn't have time to use the execution view on the last task though.	4	3	Since I moved too far at first, I decided to start backtracking. Due to the time limit I also moved back and forth rapidly to find where the mistake was. 		4
4659	As a practiced programmer, i used it like I use any debugger --- to see the value of an identifier at a specific line of code. This was better though as I didn't have to compare memory addresses to determine which identifiers were bound to the same locations.	4	4	I often just pushed "last" and then when an error occurred, I would step back to see what had just been executed. 		4
4669	It is a great tool but the interface looks too busy.	2	3		I tried to solve the problem on my own editor	4
4684	As new in programming when ever I stuck in some function or I don't understand where to define variable I use code execution view	3	3		I know where I am making mistake so I am trying other test cases to get desire output	2
4689	I used it to view the final output. I also felt that it was somewhat helpful to look at the other boxes but took a lot of time 	1	2	To see why the program was not running. Also if it had reached an error I could see what had given it that error.		2
4695	Stepping through the code to visualize what is happening internally is a huge help	4	4	to move back and forth from an error to try to find out what caused it		4
4709	I used it on the first task to understand, because I have a difficult time understanding for loops.	3	3	To see what happened in the past one more time. This helps me to consolidate my understanding.		4
4715	I figured out how to do the problem without using it, but I would use it with students!  I liked being able to see the values of the variables at any given time.	4	4	I think I wanted to see where the reversing array code was working.		3
4732	I think this is interesting.I think this is interesting.I think this is interesting.I think this is interesting.I think this is interesting.I think this is interesting.	3	2		I think this is interesting.I think this is interesting.I think this is interesting.I think this is interesting.I think this is interesting.	0
4741	Questions too easy to use view. No need.	2	1	I don't remember. I really don't.		4
4807	 I used the code execution view to debug my code 	3	2	for looking my error. fo understanding		3
4844	Task 1: I used the code execution view to see the value of "i". Task 2: I don't used the code execution view because I first had to write code for an algorithm, so there was no point in testing non existing code.	3	3		The variable "i" was out of range of the array, and i thought i saw the problem (without stepping backward).	3
4855	first I execute the code. After I verify the error. When I see where is the error, I try to change.	3	2		Yes. I used back	3
4860	to show the results of the print functions and values of the variables	4	4		I prepared the code beforehand, maybe i than stepped backwards	3
4874	Checking variables in literation and the corresponding result of that literation. Which line went wrong. 	3	3	To see which line gave an unexpected result. After i found the line, I went further back to find why.		4
4897	The code execution view was very helpful to see what goes on as the program runs.  The time challenge was a temptation to skip it though. (I skipped the code execution view for the second task, instead jumping straight to the end and looking at output. Probably because the execution is less tricky in that task.)  BTW there are at least two typos in the "You must have at lest two sentances" sentence that is displayed below. :-)	4	4		The error was obvious without running it (two times syntax errors, and once going through the whole list and reversing everything). But if it was not obvious I would have definitely used it, it seems a very useful feature.	4
4936	1. Used for checking why list index is out of scope 2. Not used much, because it was clear what to do	3	3	Wanted to check what has changed within next step Was checking the population of variables		3
4962	Step through the code and see if the values are what I expect them to be.	3	4	when I dont get an expected value I step back to understand why the value didnt become what I expected it to be.		3
5017	I only needed it to check the final result. Also, you misspelled sentences below.	3	2	I wanted to see how the behavior of the reversed function was different from the regular thing. I have nothing further to add.		3
5018	I used the Frames & Objects view to visualize where each variable was taking its information from, and I used the Code execution view to see exactly where the problem was and work back from there.	4	3	I tried to see which lines of code were about to or had affected the failing line of code. It had also helped me find how far back in the program's history a change was made in conjunction with the Frame & Object view.		4
5036	It was good to see parameter values in realtime. It help visualise data structures	4	4	backwords stepping save time. Especially compared to starting from the beginning.		4
5043	I found out why the reverse function was not working by stepping through code. I recognized the error before I actually saw it execute the runtime error because I realized the correct return value had already been achieved from the visualizer, and I knew it would continue executing anyway.	4	4	I don't recall. I think it was because I was surprised it pointed to the for loop after the last item in the iterable had been assigned and the loop executed.		3
5062	asdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjka	3	2		asdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjkaasdfghjka	2
5065	I use Pythontutor to watch the execution of lines of code sequentially in order to point the bugs. Then I handle each of them.	2	3		I carefully inspect each lines of code, so I do not need to use a backward step.	3
5085	I used the execution view to see the errors being made in the code so that I could understand what needed fixed in the code.	4	4	I went forwards first to see where the error occurred then went backwards so that I knew what issue I was looking for and could watch the steps leading up to that event.		4
5090	Haven't enough time for a detailed view. Meanwhile, I used to use Python Tutor in my lessons for explaining things for my pupils.	3	3	Because I used to go to the last step and then stepped backwards, as it sends you directly to the problem. It's useful for big listing, but for small numbers of steps I prefer to step forward.		4
5092	i didn't use it. i accidentally clinked on the next icon on the first question. for me, the 2nd one took some time. 	2	2		i didnt use it. hope to use it next time	2
5104	The view was good, but it would be perfect if we can see the view while in edit mode	3	3	I wanted to see the previous step, so that it can help me understand the remaining of the code		4
5113	I used it to see the exact flow of the program and used it to easily identify from where the problem stemmed. Then, I looked for a way to patch it, and tried it again. 	2	3	When I identified the problem step, I retraced the previous steps to see how the whole problem transpired in order to understand it better. This helps me come up with fixes that solve the problem at its source .		4
5116	I used it at the beginning to identify the problem then rewrote some of the code so that I got the desired result. I didn't need it after that	4	2		The only stepping I did through the program was from the beginning to see where the problem lay. After that, stepping backwards was unnecessary.	4
5118	i looked to see when the line that just executed performed something i wasn't expecting.	2	3	to see if i could figure out what exactly occurred and why that thing occurred.		4
5141	Used it to find errors. Checked output to see if it met expectations.	3	2	I was trying to identify where a variable ended up different than what I had expected.		3
5145	I had most of the code without it, and there wasn't as much time to go back and forth between the two views this time around, given the number of changes that needed to be made.  I preferred to do it and evaluate it in one fell swoop.	4	2		I usually know once I've made a mistake that I need to change the code before proceeding	2
5170	I was checking to see where I was not getting the required results. And working backwards to fix it.	4	4		I already identified where the problem was so did not need to step back.	4
5246	I knew the required additional code and done the changes but couldn't get the time to use for that	4	4		No Need.	4
5351	I could not finish the first task and did not understand why the function definition was wrong. 	3	3		I was stuck at starting point	4
5366	I did not use that view because i write code in mind.	3	4	because some results did not wrong around that point.		4
5370	It helped me understand what the code means. I'm not a programmer (yet?).	3	3	Because first I wanted to see what would happen if I complete the program. 		4
5388	I used the code execution view to track the assignment/value of each parameter. I find it useful to trace the values, especially during loops.	3	4		I usually press "Last" first, to see if the code has errors, and then I run it again and use "Forward" to move step by step; by the time I reach the error, I usually manage to realise what the problem is, so I don't need to go back. Once reaching the error, I usually go into EDIT mode and try to fix it (based on my assumption).	2
5408	awesome and cool	4	4		because i don't have to do it  	1
5475	don't know that view. And this is the first time to know that.	2	2	want to see the previously result. 2		2
5482	did not use execution because I was still writing code to solve for the missing values	3	2		I didn't run into any problems	3
5498	To see curent value of variable.  Period.	4	4	To move to the line of code I was interested in. I wanted to see the value of variable.		4
5500	running the code execution view is much easier to debug a code	4	4	To find the bug in the code backward step required, also for checking any correction working or not.		3
5501	1)to observe values in variables. 2)code execution sequence. 3)to see return value / print result.	2	3	1) the step was not expected by me. 2)want to see what caused the unexpected 		3
5516	I did use the view. It was really helpful to use the interface to get exactly where my logic went wrong.	4	4	I was trying to understand if my previous steps indeed did follow through, and whether the subsequent steps were logical.		4
